//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Hupin/OneDrive/Plocha/kubaSkola/pjp/PLC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PLCParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IPLCListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] PLCParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] PLCParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] PLCParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] PLCParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.variableDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDecl([NotNull] PLCParser.VariableDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.variableDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDecl([NotNull] PLCParser.VariableDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] PLCParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] PLCParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.readStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadStmt([NotNull] PLCParser.ReadStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.readStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadStmt([NotNull] PLCParser.ReadStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.writeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStmt([NotNull] PLCParser.WriteStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.writeStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStmt([NotNull] PLCParser.WriteStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] PLCParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] PLCParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.whileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStmt([NotNull] PLCParser.WhileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.whileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStmt([NotNull] PLCParser.WhileStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] PLCParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] PLCParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpr([NotNull] PLCParser.OrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpr([NotNull] PLCParser.OrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpr([NotNull] PLCParser.ParenExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpr([NotNull] PLCParser.ParenExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>eqExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqExpr([NotNull] PLCParser.EqExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>eqExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqExpr([NotNull] PLCParser.EqExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpr([NotNull] PLCParser.NotExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpr([NotNull] PLCParser.NotExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMinusExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpr([NotNull] PLCParser.UnaryMinusExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMinusExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpr([NotNull] PLCParser.UnaryMinusExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpr([NotNull] PLCParser.AddExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpr([NotNull] PLCParser.AddExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpr([NotNull] PLCParser.LiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpr([NotNull] PLCParser.LiteralExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mulExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulExpr([NotNull] PLCParser.MulExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mulExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulExpr([NotNull] PLCParser.MulExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>relExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelExpr([NotNull] PLCParser.RelExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>relExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelExpr([NotNull] PLCParser.RelExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>newOP</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewOP([NotNull] PLCParser.NewOPContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>newOP</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewOP([NotNull] PLCParser.NewOPContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignExpr([NotNull] PLCParser.AssignExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignExpr([NotNull] PLCParser.AssignExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>idExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdExpr([NotNull] PLCParser.IdExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>idExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdExpr([NotNull] PLCParser.IdExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpr([NotNull] PLCParser.AndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="PLCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpr([NotNull] PLCParser.AndExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PLCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] PLCParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PLCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] PLCParser.LiteralContext context);
}
